// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.k2.inspections.tests;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.base.plugin.KotlinPluginMode;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("code-insight/inspections-k2/tests")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("testData/multiplatform/actualExpect")
public class K2ActualExpectTestGenerated extends AbstractK2ActualExpectTest {
    @java.lang.Override
    @org.jetbrains.annotations.NotNull
    public final KotlinPluginMode getPluginMode() {
        return KotlinPluginMode.K2;
    }

    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
    }

    @TestMetadata("actualizedClass")
    public void testActualizedClass() throws Exception {
        runTest("testData/multiplatform/actualExpect/actualizedClass/");
    }

    @TestMetadata("actualizedFunction")
    public void testActualizedFunction() throws Exception {
        runTest("testData/multiplatform/actualExpect/actualizedFunction/");
    }

    @TestMetadata("actualizedInParent")
    public void testActualizedInParent() throws Exception {
        runTest("testData/multiplatform/actualExpect/actualizedInParent/");
    }

    @TestMetadata("actualizedTypealias")
    public void testActualizedTypealias() throws Exception {
        runTest("testData/multiplatform/actualExpect/actualizedTypealias/");
    }

    @TestMetadata("missedActual")
    public void testMissedActual() throws Exception {
        runTest("testData/multiplatform/actualExpect/missedActual/");
    }

    @TestMetadata("missedActualClass")
    public void testMissedActualClass() throws Exception {
        runTest("testData/multiplatform/actualExpect/missedActualClass/");
    }

    @TestMetadata("missedActualFunction")
    public void testMissedActualFunction() throws Exception {
        runTest("testData/multiplatform/actualExpect/missedActualFunction/");
    }

    @TestMetadata("missedActualInSubtree")
    public void testMissedActualInSubtree() throws Exception {
        runTest("testData/multiplatform/actualExpect/missedActualInSubtree/");
    }

    @TestMetadata("missedActualObject")
    public void testMissedActualObject() throws Exception {
        runTest("testData/multiplatform/actualExpect/missedActualObject/");
    }

    @TestMetadata("missedActualSingleTarget")
    public void testMissedActualSingleTarget() throws Exception {
        runTest("testData/multiplatform/actualExpect/missedActualSingleTarget/");
    }

    @TestMetadata("onlyListMissingLeaves")
    public void testOnlyListMissingLeaves() throws Exception {
        runTest("testData/multiplatform/actualExpect/onlyListMissingLeaves/");
    }
}
