// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
{
  parserClass='com.intellij.devkit.apiDump.lang.parser.ADParser'
  parserUtilClass="com.intellij.devkit.apiDump.lang.parser.ADParserUtil"
  psiPackage='com.intellij.devkit.apiDump.lang.psi'
  psiImplPackage='com.intellij.devkit.apiDump.lang.psi.impl'

  elementTypeHolderClass='com.intellij.devkit.apiDump.lang.psi.ADElementTypes'
  elementTypeClass='com.intellij.devkit.apiDump.lang.elementTypes.ADElementType'
  psiClassPrefix="AD"
  psiImplClassSuffix="ImplGen"

  psiImplUtilClass="com.intellij.devkit.apiDump.lang.psi.ADPsiImplUtil"

  tokenTypeClass='com.intellij.devkit.apiDump.lang.elementTypes.ADTokenType'

  implements = 'com.intellij.devkit.apiDump.lang.psi.ADPsiElement'
  extends = 'com.intellij.devkit.apiDump.lang.psi.impl.ADPsiElementImpl'

  parserImports = 'static com.intellij.lang.parser.GeneratedParserUtilBase.*'

  generateFirstCheck = 1

  tokens = [
      IDENTIFIER='IDENTIFIER'
      MINUS='-'
      DOT='.'
      ASTERISK='*'
      LPAREN='('
      RPAREN=')'
      LBRACKET='['
      RBRACKET=']'
      COMMA=','
      COLON=':'
      AT='@'
      LESS='<'
      MORE='>'
  ]

  extends("Method|Field|Constructor|Companion|SuperType") = Member
}

//////////////////////////////////////////root///////////////////////////////////////////////////////////////////////////

File ::= ClassDeclaration*

ClassDeclaration ::= ClassHeader Member*

Member ::= Method | Field | Constructor | Companion | SuperType

ClassHeader ::= Modifiers? TypeReference

Modifiers ::= Experimental? Modifier? COLON

Experimental ::= ASTERISK

Modifier ::= IDENTIFIER | AT

TypeReference ::= IDENTIFIER (DOT IDENTIFIER)* Array*
{
  mixin = 'com.intellij.devkit.apiDump.lang.psi.impl.ADTypeReferenceImpl'
}

Array ::= LBRACKET RBRACKET

Method ::= MINUS Modifiers? MethodReference Parameters TypeAnnotation
MethodReference ::= IDENTIFIER

Parameters ::= LPAREN Parameter? (COMMA Parameter)* RPAREN
{ pin = 'LPAREN' }

Parameter ::= TypeReference

private TypeAnnotation ::= COLON TypeReference
{ pin = 'COLON' }

Field ::= MINUS Modifiers? FieldReference TypeAnnotation
FieldReference ::= IDENTIFIER

Constructor ::= MINUS Modifiers? LESS 'init' MORE Parameters TypeAnnotation
{ pin = 'MORE' }

SuperType ::= MINUS TypeReference

Companion ::= MINUS Modifiers? 'Companion' COLON TypeReference
