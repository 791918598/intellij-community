// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
package com.intellij.openapi.roots

import com.intellij.openapi.application.ApplicationManager
import com.intellij.openapi.extensions.ExtensionPointName
import com.intellij.openapi.project.Project
import com.intellij.openapi.util.NlsContexts
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.psi.PsiElement

abstract class GeneratedSourcesFilter {
  companion object {
    @JvmField
    val EP_NAME: ExtensionPointName<GeneratedSourcesFilter> = ExtensionPointName("com.intellij.generatedSourcesFilter")

    @JvmStatic
    fun isGeneratedSourceByAnyFilter(file: VirtualFile, project: Project): Boolean {
      return ApplicationManager.getApplication().runReadAction<Boolean, RuntimeException> {
        !project.isDisposed && file.isValid && EP_NAME.extensionList.any { it.isGeneratedSource(file, project) }
      }
    }
  }

  abstract fun isGeneratedSource(file: VirtualFile, project: Project): Boolean

  /**
   * Returns all elements that have been processed by a code generator to derive the given element.
   *
   * @param element the generated element
   * @return a list of original elements. An empty result indicates that the element is not considered to be generated by the filter.
   */
  open fun getOriginalElements(element: PsiElement): List<PsiElement> = emptyList()

  /**
   * The method is called only if [.isGeneratedSource] returns `true`.
   *
   * @return a text to be shown in the editor notification panel or `null` for the default text
   */
  open fun getNotificationText(file: VirtualFile, project: Project): @NlsContexts.LinkLabel String? = null
}
