// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.package com.intellij.platform.searchEverywhere.frontendimport com.intellij.openapi.application.EDTimport com.intellij.openapi.components.Serviceimport com.intellij.openapi.project.Projectimport com.intellij.platform.kernel.withKernelimport com.intellij.platform.searchEverywhere.SearchEverywhereSessionEntityimport com.intellij.platform.searchEverywhere.frontend.ui.SearchEverywherePopupManagerimport com.intellij.platform.searchEverywhere.frontend.vm.SearchEverywherePopupVmimport com.intellij.platform.util.coroutines.childScopeimport fleet.kernel.changeimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.withContextimport org.jetbrains.annotations.ApiStatus@ApiStatus.Internal@Service(Service.Level.PROJECT)class SearchEverywhereFrontendService(val project: Project, val coroutineScope: CoroutineScope) {  suspend fun showPopup() {    val popupScope = coroutineScope.childScope("SearchEverywhereFrontendService scope")    val sessionEntity = withKernel {      change {        val sessionEntity = SearchEverywhereSessionEntity.new {}        sessionEntity      }    }    val popupVm = SearchEverywherePopupVm(popupScope, project, sessionEntity.eid) {      withKernel {        change {          sessionEntity.delete()        }      }    }    withContext(Dispatchers.EDT) {      SearchEverywherePopupManager().createPopup(popupVm, project).showCenteredInCurrentWindow(project)    }  }  companion object {    @JvmStatic    fun getInstance(project: Project): SearchEverywhereFrontendService = project.getService(SearchEverywhereFrontendService::class.java)  }}