// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
/**
 * This file is generated by [com.intellij.platform.eel.codegen.BuildersGenerator].
 */
package com.intellij.platform.eel.fs

import com.intellij.platform.eel.*
import com.intellij.platform.eel.fs.EelFileSystemApi.ListDirectoryWithAttrsArgs
import com.intellij.platform.eel.fs.EelFileSystemApi.SymlinkPolicy
import com.intellij.platform.eel.path.EelPath
import org.jetbrains.annotations.CheckReturnValue

/**
 * Returns names of files in a directory and the attributes of the corresponding files.
 * If [path] is a symlink, it will be resolved regardless of [symlinkPolicy].
 *  TODO Is it an expected behaviour?
 *
 * [symlinkPolicy] controls resolution of symlinks among children.
 *  TODO The behaviour is different from resolveSymlinks in [stat]. To be fixed.
 */
@GeneratedBuilder.Result
fun EelFileSystemApi.listDirectoryWithAttrs(
  path: EelPath,
): com_intellij_platform_eel_fs_EelFileSystemApi_listDirectoryWithAttrs_OwnedBuilder =
  com_intellij_platform_eel_fs_EelFileSystemApi_listDirectoryWithAttrs_OwnedBuilder(
    owner = this,
    path = path,
  )

@GeneratedBuilder.Result
class com_intellij_platform_eel_fs_EelFileSystemApi_listDirectoryWithAttrs_OwnedBuilder(
  private val owner: EelFileSystemApi,
  private var path: EelPath,
) : OwnedBuilder<EelResult<Collection<Pair<String, EelFileInfo>>, EelFileSystemApi.ListDirectoryError>> {
  private var symlinkPolicy: SymlinkPolicy = SymlinkPolicy.DO_NOT_RESOLVE

  fun path(arg: EelPath): com_intellij_platform_eel_fs_EelFileSystemApi_listDirectoryWithAttrs_OwnedBuilder = apply {
    this.path = arg
  }

  fun symlinkPolicy(arg: SymlinkPolicy): com_intellij_platform_eel_fs_EelFileSystemApi_listDirectoryWithAttrs_OwnedBuilder = apply {
    this.symlinkPolicy = arg
  }

  fun doNotResolve(): com_intellij_platform_eel_fs_EelFileSystemApi_listDirectoryWithAttrs_OwnedBuilder =
    symlinkPolicy(SymlinkPolicy.DO_NOT_RESOLVE)

  fun justResolve(): com_intellij_platform_eel_fs_EelFileSystemApi_listDirectoryWithAttrs_OwnedBuilder =
    symlinkPolicy(SymlinkPolicy.JUST_RESOLVE)

  fun resolveAndFollow(): com_intellij_platform_eel_fs_EelFileSystemApi_listDirectoryWithAttrs_OwnedBuilder =
    symlinkPolicy(SymlinkPolicy.RESOLVE_AND_FOLLOW)

  /**
   * Complete the builder and call [com.intellij.platform.eel.fs.EelFileSystemApi.listDirectoryWithAttrs]
   * with an instance of [com.intellij.platform.eel.fs.EelFileSystemApi.ListDirectoryWithAttrsArgs].
   */
  @org.jetbrains.annotations.CheckReturnValue
  override suspend fun eelIt(): EelResult<Collection<Pair<String, EelFileInfo>>, EelFileSystemApi.ListDirectoryError> =
    owner.listDirectoryWithAttrs(
      ListDirectoryWithAttrsArgsImpl(
        path = path,
        symlinkPolicy = symlinkPolicy,
      )
    )
}

@GeneratedBuilder.Result
fun EelFileSystemPosixApi.listDirectoryWithAttrs(
  path: EelPath,
): com_intellij_platform_eel_fs_EelFileSystemPosixApi_listDirectoryWithAttrs_OwnedBuilder =
  com_intellij_platform_eel_fs_EelFileSystemPosixApi_listDirectoryWithAttrs_OwnedBuilder(
    owner = this,
    path = path,
  )

@GeneratedBuilder.Result
class com_intellij_platform_eel_fs_EelFileSystemPosixApi_listDirectoryWithAttrs_OwnedBuilder(
  private val owner: EelFileSystemPosixApi,
  private var path: EelPath,
) : OwnedBuilder<EelResult<Collection<Pair<String, EelPosixFileInfo>>, EelFileSystemApi.ListDirectoryError>> {
  private var symlinkPolicy: SymlinkPolicy = SymlinkPolicy.DO_NOT_RESOLVE

  fun path(arg: EelPath): com_intellij_platform_eel_fs_EelFileSystemPosixApi_listDirectoryWithAttrs_OwnedBuilder = apply {
    this.path = arg
  }

  fun symlinkPolicy(arg: SymlinkPolicy): com_intellij_platform_eel_fs_EelFileSystemPosixApi_listDirectoryWithAttrs_OwnedBuilder = apply {
    this.symlinkPolicy = arg
  }

  fun doNotResolve(): com_intellij_platform_eel_fs_EelFileSystemPosixApi_listDirectoryWithAttrs_OwnedBuilder =
    symlinkPolicy(SymlinkPolicy.DO_NOT_RESOLVE)

  fun justResolve(): com_intellij_platform_eel_fs_EelFileSystemPosixApi_listDirectoryWithAttrs_OwnedBuilder =
    symlinkPolicy(SymlinkPolicy.JUST_RESOLVE)

  fun resolveAndFollow(): com_intellij_platform_eel_fs_EelFileSystemPosixApi_listDirectoryWithAttrs_OwnedBuilder =
    symlinkPolicy(SymlinkPolicy.RESOLVE_AND_FOLLOW)

  /**
   * Complete the builder and call [com.intellij.platform.eel.fs.EelFileSystemPosixApi.listDirectoryWithAttrs]
   * with an instance of [com.intellij.platform.eel.fs.EelFileSystemApi.ListDirectoryWithAttrsArgs].
   */
  @org.jetbrains.annotations.CheckReturnValue
  override suspend fun eelIt(): EelResult<Collection<Pair<String, EelPosixFileInfo>>, EelFileSystemApi.ListDirectoryError> =
    owner.listDirectoryWithAttrs(
      ListDirectoryWithAttrsArgsImpl(
        path = path,
        symlinkPolicy = symlinkPolicy,
      )
    )
}

@GeneratedBuilder.Result
fun EelFileSystemWindowsApi.listDirectoryWithAttrs(
  path: EelPath,
): com_intellij_platform_eel_fs_EelFileSystemWindowsApi_listDirectoryWithAttrs_OwnedBuilder =
  com_intellij_platform_eel_fs_EelFileSystemWindowsApi_listDirectoryWithAttrs_OwnedBuilder(
    owner = this,
    path = path,
  )

@GeneratedBuilder.Result
class com_intellij_platform_eel_fs_EelFileSystemWindowsApi_listDirectoryWithAttrs_OwnedBuilder(
  private val owner: EelFileSystemWindowsApi,
  private var path: EelPath,
) : OwnedBuilder<EelResult<Collection<Pair<String, EelWindowsFileInfo>>, EelFileSystemApi.ListDirectoryError>> {
  private var symlinkPolicy: SymlinkPolicy = SymlinkPolicy.DO_NOT_RESOLVE

  fun path(arg: EelPath): com_intellij_platform_eel_fs_EelFileSystemWindowsApi_listDirectoryWithAttrs_OwnedBuilder = apply {
    this.path = arg
  }

  fun symlinkPolicy(arg: SymlinkPolicy): com_intellij_platform_eel_fs_EelFileSystemWindowsApi_listDirectoryWithAttrs_OwnedBuilder = apply {
    this.symlinkPolicy = arg
  }

  fun doNotResolve(): com_intellij_platform_eel_fs_EelFileSystemWindowsApi_listDirectoryWithAttrs_OwnedBuilder =
    symlinkPolicy(SymlinkPolicy.DO_NOT_RESOLVE)

  fun justResolve(): com_intellij_platform_eel_fs_EelFileSystemWindowsApi_listDirectoryWithAttrs_OwnedBuilder =
    symlinkPolicy(SymlinkPolicy.JUST_RESOLVE)

  fun resolveAndFollow(): com_intellij_platform_eel_fs_EelFileSystemWindowsApi_listDirectoryWithAttrs_OwnedBuilder =
    symlinkPolicy(SymlinkPolicy.RESOLVE_AND_FOLLOW)

  /**
   * Complete the builder and call [com.intellij.platform.eel.fs.EelFileSystemWindowsApi.listDirectoryWithAttrs]
   * with an instance of [com.intellij.platform.eel.fs.EelFileSystemApi.ListDirectoryWithAttrsArgs].
   */
  @org.jetbrains.annotations.CheckReturnValue
  override suspend fun eelIt(): EelResult<Collection<Pair<String, EelWindowsFileInfo>>, EelFileSystemApi.ListDirectoryError> =
    owner.listDirectoryWithAttrs(
      ListDirectoryWithAttrsArgsImpl(
        path = path,
        symlinkPolicy = symlinkPolicy,
      )
    )
}

@GeneratedBuilder.Result
class ListDirectoryWithAttrsArgsBuilder(
  private var path: EelPath,
) {
  private var symlinkPolicy: SymlinkPolicy = SymlinkPolicy.DO_NOT_RESOLVE

  fun path(arg: EelPath): ListDirectoryWithAttrsArgsBuilder = apply {
    this.path = arg
  }

  fun symlinkPolicy(arg: SymlinkPolicy): ListDirectoryWithAttrsArgsBuilder = apply {
    this.symlinkPolicy = arg
  }

  fun doNotResolve(): ListDirectoryWithAttrsArgsBuilder =
    symlinkPolicy(SymlinkPolicy.DO_NOT_RESOLVE)

  fun justResolve(): ListDirectoryWithAttrsArgsBuilder =
    symlinkPolicy(SymlinkPolicy.JUST_RESOLVE)

  fun resolveAndFollow(): ListDirectoryWithAttrsArgsBuilder =
    symlinkPolicy(SymlinkPolicy.RESOLVE_AND_FOLLOW)

  fun build(): ListDirectoryWithAttrsArgs =
    ListDirectoryWithAttrsArgsImpl(
      path = path,
      symlinkPolicy = symlinkPolicy,
    )
}

@GeneratedBuilder.Result
private class ListDirectoryWithAttrsArgsImpl(
  override val path: EelPath,
  override val symlinkPolicy: SymlinkPolicy,
) : ListDirectoryWithAttrsArgs
      